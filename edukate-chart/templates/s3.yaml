{{ if and .Values.s3.enabled (contains .Values.profile "dev") }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: {{ .Values.namespace }}
  labels:
    io.kompose.service: mongodb
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      io.kompose.service: mongodb
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        io.kompose.service: mongodb
    spec:
      restartPolicy: Always
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.secretName }}
                  key: "username"
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.secretName }}
                  key: "password"
          volumeMounts:
            - mountPath: /data/db
              name: mongo-pv
          resources:
            limits:
              memory: "1Gi"
              cpu: "1000m"
            requests:
              memory: "256Mi"
              cpu: "500m"
      volumes:
        - name: mongo-pv
          persistentVolumeClaim:
            claimName: mongo-pvc

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongo-persistent-volume
  namespace: {{ .Values.namespace }}
  labels:
    io.kompose.service: mongodb
spec:
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /mnt/k8s/mongo

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-persistent-volume-claim
  namespace: {{ .Values.namespace }}
spec:
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  selector:
    matchLabels:
      io.kompose.service: mongodb

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: {{ .Values.namespace }}
spec:
  selector:
    io.kompose.service: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017
  type: ClusterIP

{{ end }}
